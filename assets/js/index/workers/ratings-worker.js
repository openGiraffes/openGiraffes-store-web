const WORKER_NAME="Ratings";importScripts("common.js");const jsonHeader={"Content-Type":"application/json"};onmessage=e=>{wLog("log","Ratings worker started.");const r={success:!1,response:{}};switch(e.data.command){case"count":if(wLog("log",'Selected command "count".'),e.data.args.slug){wLog("log","Making request to download counts tracker.");const s=syncRequest({type:"GET",url:"https://liaronce.top/download_counter/count/"+e.data.args.slug,timeout:2e3});s.success?(r.success=!0,wLog("log",'Download count for slug "'+e.data.args.slug+'" recorded successfully.')):wLog("warning",'Download count for slug "'+e.data.args.slug+'" failed to record: '+s.error)}else wLog("error","Slug not supplied for count command, not performing count!");break;case"create":if(wLog("log",'Selected command "create".'),e.data.args.username&&e.data.args.logintoken){let s=/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,}$/;/^[\u4e00-\u9fa5]{0,}$/.test(e.data.args.username)?e.data.args.username="Unknown":s.test(userDetails.username)?e.data.args.username=e.data.args.username:e.data.args.username="Unknown",wLog("log","Making request to ratings server.");const o=syncJSONRequest({type:"POST",url:"https://liaronce.top/createuser",headers:jsonHeader,body:JSON.stringify({username:e.data.args.username,logintoken:e.data.args.logintoken})});o.success?r.success=!0:409===o.error?wLog("error","The ratings server rejected the creation request."):wLog("error","Error making request to ratings server: "+o.error)}break;case"login":if(wLog("log",'Selected command "login".'),e.data.args.username&&e.data.args.logintoken){wLog("log","Making request to ratings server.");const s=syncJSONRequest({type:"POST",url:"https://liaronce.top/checkuser",headers:jsonHeader,body:JSON.stringify({username:e.data.args.username,logintoken:e.data.args.logintoken})});s.success?(r.response=s,r.response.success?(r.success=!0,wLog("log","Logged in user on ratings server successfully!")):wLog("error","Could not login user on ratings server: "+r.response.error)):401===s.error?wLog("error","The ratings server rejected the login request."):wLog("error","Error making request to ratings server: "+s.error)}else wLog("error","Not enough arguments provided for login command, not doing anything!");break;case"add":if(wLog("log",'Selected command "add".'),e.data.args.username&&e.data.args.logintoken&&e.data.args.appid&&e.data.args.points){wLog("log","Making request to ratings server.");const s=syncJSONRequest({type:"POST",url:"https://liaronce.top/ratings/"+e.data.args.appid+"/add",headers:jsonHeader,body:JSON.stringify({username:e.data.args.username,logintoken:e.data.args.logintoken,points:e.data.args.points})});s.success?(r.response=s,r.response.success?(r.success=!0,wLog("log","Recorded rating to ratings server successfully!")):wLog("error","Could not record ratings to server: "+r.response.error)):wLog("error","Error making request to ratings server: "+s.error)}break;case"get":if(wLog("log",'Selected command "get".'),e.data.args.appid){wLog("log","Making request to ratings server.");const s=syncJSONRequest({type:"GET",url:"https://liaronce.top/ratings/"+e.data.args.appid,headers:fixedHeaders});s.success?(r.response=s,r.response.success?(r.success=!0,wLog("log",`Got ratings for app '${e.data.args.appid}' successfully!`)):wLog("error",`Could not get ratings for app "${e.data.args.appid}!"`)):wLog("error","Error making request to ratings server: "+s.error)}}wLog("log","Ratings worker completed!"),postMessage(r)};